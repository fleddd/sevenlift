// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  password String
  name     String
  provider Provider @default(LOCAL)

  currentPlanId String?  @map("current_plan_id")
  folders       Folder[]

  refreshToken String? @map("refresh_token")

  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  trainingProgram TrainingProgram[]
  Exercise        Exercise[]

  @@map("users")
}

model TrainingProgram {
  id String @id @default(cuid())

  name String // Name of the program plan "PPL", "Arnold Split"

  userId   String  @map("user_id")
  user     User    @relation(fields: [userId], references: [id])
  folderId String? @map("folder_id")
  folder   Folder? @relation(fields: [folderId], references: [id])

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  TrainingDay TrainingDay[]

  @@index([userId])
  @@map("training_programs")
}

model Folder {
  id               String            @id @default(cuid())
  userId           String            @map("user_id")
  user             User              @relation(fields: [userId], references: [id])
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  trainingPrograms TrainingProgram[]

  @@index([userId])
  @@map("folders")
}

model TrainingDay {
  id                String          @id @default(cuid())
  dayIndex          Int             @map("day_index") // 0 = Monday, 1 = Tuesday, etc.
  title             String
  trainingProgramId String          @map("program_plan_id")
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id])
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  exercises TrainingDayExercise[]

  @@index([trainingProgramId])
  @@map("training_days")
}

model Exercise {
  id                  String                @id @default(cuid())
  name                String                @unique
  description         String?
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  userId              String?               @map("user_id") // If null, it's global else - custom exercise
  user                User?                 @relation(fields: [userId], references: [id])
  TrainingDayExercise TrainingDayExercise[]

  @@map("exercises")
}

model TrainingDayExercise {
  id            String      @id @default(cuid())
  trainingDayId String      @map("training_day_id")
  trainingDay   TrainingDay @relation(fields: [trainingDayId], references: [id])

  exerciseId String   @map("exercise_id")
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  sets  Int
  reps  Int
  order Int @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([trainingDayId])
  @@index([exerciseId])
  @@map("training_day_exercises")
}

enum Provider {
  GOOGLE
  LOCAL
}
